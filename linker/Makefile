# System software project - Linker
# Makefile
#

# Misc. macros
SHELL=/bin/bash
CC=gcc
CFLAGS=-c -MMD -Wall -Wextra -Wpedantic -std=c11
ARCHFLAG=-m32
DEBUG_FLAGS=-g # Override on command line with DEBUG_FLAGS=
CLIBS=         # Override on command line with CLIBS=-l<libname>

# Parent directory (project root)
PROJECT_ROOT=..

# Subdirectories
SRCDIR=src
OBJDIR=obj
HDIR=h

# Binary output directory
BINDIR=$(PROJECT_ROOT)/bin

# SRC is a list of C source files
SRC=$(wildcard $(SRCDIR)/*.c)
# OBJ is a list of .o files generated by the list of C source files
OBJ=$(patsubst $(SRCDIR)/%.c, $(OBJDIR)/%.o, $(SRC))

# Name of the binary output file
BIN=lnk

# Build rule for the binary file
$(BIN): $(BINDIR) $(OBJDIR) $(OBJ)
	$(CC) -o $(BINDIR)/$(BIN) $(OBJ) $(CLIBS) $(ARCHFLAG)
	cp $(BINDIR)/$(BIN) ~/bin/$(BIN)

# Build rule for the directory for binary files
$(BINDIR):
	mkdir -p $(BINDIR)

# Build rule for the directory for object files
$(OBJDIR):
	mkdir -p $(OBJDIR)

# Build rule for object files
$(OBJDIR)/%.o: $(SRCDIR)/%.c
	$(CC) $(CFLAGS) $(DEBUG_FLAGS) $(ARCHFLAG) -I $(HDIR) -o $@ $<

# Inspect dependency files (generated by the build rule for object files)
# in search for target's dependencies
-include $(OBJDIR)/*.d

# Clean working directory
clean:
	rm -f $(BINDIR)/$(BIN)
	rm -rf $(OBJDIR)

# List of names that (if found in dependency list for a rule) should not be
# considered as rules (aka list of 'fake targets')
.PHONY: clean

